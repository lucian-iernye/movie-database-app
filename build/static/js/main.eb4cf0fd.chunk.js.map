{"version":3,"sources":["components/Popup/Popup.module.scss","components/SearchBar/SearchBar.module.scss","components/Movies/Movies.module.scss","components/Movie/Movie.module.scss","components/SearchBar/SearchBar.jsx","components/Movie/index.js","components/Movie/Movie.jsx","components/Movies/index.js","components/Movies/Movies.jsx","components/Popup/index.js","components/Popup/Popup.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","SearchBar","handleInput","search","className","styles","searchboxSection","type","placeholder","searchbox","onChange","onKeyPress","Movie","result","openPopup","onClick","imdbID","src","Poster","alt","Title","Movies","results","map","key","Popup","selected","closePopup","popup","content","Year","rating","imdbRating","plot","Plot","close","App","useState","state","setState","event","target","value","prevState","console","log","fetch","then","res","json","data","Search","id","catch","err","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.eb4cf0fd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"popup\":\"Popup_popup__28jak\",\"content\":\"Popup_content__2hpGb\",\"rating\":\"Popup_rating__19tir\",\"plot\":\"Popup_plot__1YSfY\",\"close\":\"Popup_close__31fyP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchboxSection\":\"SearchBar_searchboxSection__2ejwb\",\"searchbox\":\"SearchBar_searchbox__2rgP3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"results\":\"Movies_results__2_BsM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"result\":\"Movie_result__2lEi3\"};","import React from \"react\";\nimport styles from \"./SearchBar.module.scss\";\n\nconst SearchBar = ({ handleInput, search }) => {\n  return (\n    <section className={styles.searchboxSection}>\n      <input\n        type=\"text\"\n        placeholder=\"Search for a good movie...\"\n        className={styles.searchbox}\n        onChange={handleInput}\n        onKeyPress={search}\n      />\n    </section>\n  );\n};\n\nexport default SearchBar;\n","import Movie from \"./Movie\";\r\n\r\nexport default Movie;\r\n","import React from \"react\";\nimport styles from \"./Movie.module.scss\";\n\nconst Movie = ({ result, openPopup }) => {\n  return (\n    <div className={styles.result} onClick={() => openPopup(result.imdbID)}>\n      <img src={result.Poster} alt={result.Title} />\n      <h3>{result.Title}</h3>\n    </div>\n  );\n};\n\nexport default Movie;\n","import Movies from \"./Movies\";\r\n\r\nexport default Movies;\r\n","import React from \"react\";\r\nimport styles from \"./Movies.module.scss\";\r\nimport Movie from \"../Movie\";\r\n\r\nconst Movies = ({ results, openPopup }) => {\r\n  return (\r\n    <>\r\n      <section className={styles.results}>\r\n        {results.map((result) => (\r\n          <Movie key={result.imdbID} result={result} openPopup={openPopup} />\r\n        ))}\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Movies;\r\n","import Popup from \"./Popup\";\n\nexport default Popup;\n","import React from \"react\";\nimport styles from \"./Popup.module.scss\";\n\nconst Popup = ({ selected, closePopup }) => {\n  return (\n    <section className={styles.popup}>\n      <div className={styles.content}>\n        <h2>\n          {selected.Title} <span>({selected.Year})</span>\n        </h2>\n        <p className={styles.rating}>Rating: {selected.imdbRating}</p>\n        <div className={styles.plot}>\n          <img src={selected.Poster} alt={selected.Title} />\n          <p>Description: {selected.Plot}</p>\n          <button className={styles.close} onClick={closePopup}>\n            Close\n          </button>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Popup;\n","import React, { useState } from \"react\";\r\n// import axios from \"axios\";\r\n\r\nimport \"./App.scss\";\r\nimport SearchBar from \"./components/SearchBar/SearchBar\";\r\nimport Movies from \"./components/Movies\";\r\nimport Popup from \"./components/Popup\";\r\n\r\nconst App = () => {\r\n  const [state, setState] = useState({\r\n    search: \"\",\r\n    results: [],\r\n    selected: {},\r\n  });\r\n\r\n  const search = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      fetch(`https://www.omdbapi.com/?&apikey=40062257&s=${state.search}`)\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          let result = data.Search;\r\n\r\n          setState((prevState) => {\r\n            return { ...prevState, results: result };\r\n          });\r\n        });\r\n    } else if (event.target.value === \"\") {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const handleInput = (event) => {\r\n    let search = event.target.value;\r\n    setState((prevState) => {\r\n      return { ...prevState, search: search };\r\n    });\r\n    console.log(state.search);\r\n  };\r\n\r\n  const openPopup = (id) => {\r\n    fetch(`http://www.omdbapi.com/?&apikey=40062257&i=${id}`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        let result = data;\r\n\r\n        setState((prevState) => {\r\n          return { ...prevState, selected: result };\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const closePopup = () => {\r\n    setState((prevState) => {\r\n      return { ...prevState, selected: {} };\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>Movie database 2020. Made with passion by a _Nologist ...</h1>\r\n        <h2>Please search any movie by typing the name and press enter</h2>\r\n      </header>\r\n      <main>\r\n        <SearchBar handleInput={handleInput} search={search} />\r\n        <Movies results={state.results} openPopup={openPopup} />\r\n\r\n        {typeof state.selected.Title !== \"undefined\" ? (\r\n          <Popup selected={state.selected} closePopup={closePopup} />\r\n        ) : (\r\n          false\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}